import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven'
    id 'jacoco'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'io.freefair.lombok' version '5.3.0'
}

group = 'com.iexec.sms'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://nexus.iex.ec/repository/maven-public/"
    }
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    deployerJars
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
}

ext {
    springCloudVersion = '2020.0.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"
    //implementation files("../iexec-common/build/libs/iexec-common-${iexecCommonVersion}.jar")

    // spring
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // H2
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtime 'com.h2database:h2:1.4.200'

    // swagger
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"

    //ssl
    implementation 'org.apache.httpcomponents:httpclient:4.5.9'

    // Web3j issues, see core build.gradle
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50'

    // velocity for templating
    implementation 'org.apache.velocity:velocity-engine-core:2.0'

    // MongoDB
    //implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    //implementation 'org.springframework.boot:spring-boot-starter'
    //testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    // testImplementation 'org.mockito:mockito-inline:2.13.0' // activates mocking final classes/methods

    // test containers
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'
    testImplementation 'org.testcontainers:testcontainers:1.16.0'
    testImplementation 'org.testcontainers:mongodb:1.16.0'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir 'src/itest/java'
        }
        resources.srcDir 'src/itest/resources'
    }
}

task itest(type:Test) {
    description = "Run integration tests (src/it/...)."
    // enabled isDev
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // run always
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.3"
}
build.dependsOn jacocoTestReport

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == "master"
def isDevelopBranch = gitBranch == "develop"
def canUploadArchives = (isMasterBranch || isDevelopBranch ) && project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")
def gitShortCommit = 'git rev-parse --short HEAD'.execute().text.trim()
def isSnapshotVersion = project.version.contains("SNAPSHOT")

project.ext.getNexusMaven = {
    def nexusMavenBase = "https://nexus.iex.ec/repository"
    if (isSnapshotVersion) {
        return nexusMavenBase + "/maven-snapshots/"
    } else {
        return nexusMavenBase + "/maven-releases/"
    }
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: getNexusMaven()) {
            authentication(userName: project.nexusUser, password: project.nexusPassword)
        }
    }
}
uploadArchives.enabled = canUploadArchives

// create the version controller for the core
task createVersion(type: Copy) {
    // delete old one
    delete 'src/main/java/com/iexec/sms/utils/version/Version.java'
    // use and copy template to the new location
    from 'src/main/resources/Version.java.template'
    into 'src/main/java/com/iexec/sms/utils/version/'

    rename { String fileName ->
        fileName.replace('.template', '')
    }
    // replace tokens in the template file
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}
// the createVersion task should be called before compileJava or the version service will not work
compileJava.dependsOn createVersion

def imageName = "nexus.iex.ec/iexec-sms"
def trustedDockerfileName = "Dockerfile"
def untrustedDockerfileName = "Dockerfile.untrusted"
def jarName = "iexec-sms-${version}.jar"

project.ext.getDockerImageNameFull = {
    def imageNameWithVersion = imageName + ":${version}"
    if (isSnapshotVersion) {
        return imageNameWithVersion + "-" + gitShortCommit
    } else {
        return imageNameWithVersion
    }
}

project.ext.getDockerImageNameShortCommit = {
    return imageName + ":" + gitShortCommit
}

task buildImage(type: Exec) {
    description 'Building iexec-sms Docker image'
    commandLine("sh", "-c",
            "docker image build -f build/resources/main/${untrustedDockerfileName}" + 
            " -t ${getDockerImageNameFull()} --build-arg JAR_NAME=${jarName} . &&" +
            "docker tag ${getDockerImageNameFull()} ${imageName}:dev")
    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        println standardOutput
        return standardOutput.toString()
    }
}

task buildTrustedImage(type: Exec) {
    def trustedImageName = getDockerImageNameFull() + "-trusted"
    description 'Building iexec-sms Docker image'
    commandLine("sh", "-c",
            "docker image build -f build/resources/main/${trustedDockerfileName} " + 
            "-t ${trustedImageName} --build-arg JAR_NAME=${jarName} --no-cache . && " +
            "docker tag ${trustedImageName} ${imageName}:dev-trusted")
}

task templatePalaemon {
    String smsMrEnclave
    String smsFspfKey
    String smsFspfTag

    /*
    * Docker build will produce such logs: "RUN .. <MRENCLAVE>$MRENCLAVE</MRENCLAVE> ... <MRENCLAVE>abcdef</MRENCLAVE>"
    * We need to extract the 2nd occurence 'abcdef'
    */
    ext.extractValueBetweenTags = { s, tag ->
        String beginTag = "<" + tag + ">"
        String endTag = "</" + tag + ">"
        return s.substring(s.indexOf(beginTag, s.indexOf(beginTag) + 2) + beginTag.length(), s.indexOf(endTag, s.indexOf(endTag) + 2))
    }

    doFirst {
        String logs = buildImage.output()
        smsMrEnclave = extractValueBetweenTags(logs, "MRENCLAVE")
        smsFspfKey = extractValueBetweenTags(logs, "FSPF_KEY")
        smsFspfTag = extractValueBetweenTags(logs, "FSPF_TAG")
    }

    doLast{
        copy {
            // delete old one
            delete 'src/main/resources/boot/sms-palaemon-conf.yml'
            // use and copy template to the new location
            from 'src/main/resources/sms-palaemon-conf.yml.template'
            into 'src/main/resources/boot/'

            rename { String fileName ->
                fileName.replace('.template', '')
            }
            // replace tokens in the template file
            filter(ReplaceTokens, tokens: [
                    IEXEC_SMS_PALAEMON_SERVICE_NAME: "${rootProject.name}".toString(),
                    IEXEC_SMS_MRENCLAVE: smsMrEnclave,
                    IEXEC_SMS_FSPF_KEY: smsFspfKey,
                    IEXEC_SMS_FSPF_TAG: smsFspfTag,
            ])

        }
    }
}
//templatePalaemon.dependsOn buildImage
//buildImage.finalizedBy templatePalaemon

task pushImage(type: Exec) {
    if (project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")) {
        commandLine("sh", "-c", "docker login -u " + project.nexusUser + " -p " + project.nexusPassword + " nexus.iex.ec && " +
                "docker push " + getDockerImageNameFull() + " && " +
                "docker tag " + getDockerImageNameFull() + " " + getDockerImageNameShortCommit() + " && " +
                "docker push " + getDockerImageNameShortCommit() + " && " +
                "docker logout")
    } else {
        println "Credentials for DockerHub are missing, the images cannot be pushed"
    }
}
pushImage.dependsOn buildImage
pushImage.enabled = canUploadArchives
